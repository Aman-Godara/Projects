type elem = 
| Nil 
| Elem of node and node = {content : int ; mutable next : elem } ;;

type ll = {mutable first : elem } ;; 

let e1 = Elem {content = 1 ; next = Nil } ;;

let e2 = Elem { content = 2 ; next = Elem {content = 3 ; next = Nil} } ;;

let e3 =  Elem { content = 4 ; next = Elem {content = 5 ; next = Nil} } ;; 

let l1 = {first = e3} ;; 

let add e l = match e with 
| Elem (h) -> h.next <- l.first   
| Nil -> () ;;

let add1 e l = add e l ; l.first <- e ;;

// here you will observe a cycle in the l1 and e3 because you are inserting l1 in e3 
(l1 too contains e3) so you may think that two time se3 will come but this is not so 
because as you change e3 ,l1 is also changes, but e3 is sync with l1 as e3 is extended with 
l1 , so as l1 changes e3 also changes.
 
// let p = ref 0 ;;

// let rec add e l =match e with 
| Elem (h) -> if h.next = Nil then h.next <- l.first else ( add (h.next) (l) )  
| Nil -> () ;
   p := !p + 1 ;;


