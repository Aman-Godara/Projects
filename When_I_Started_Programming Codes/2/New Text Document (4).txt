CODE FOR FINDING GREATEST POSSIBLE NUMBER FROM THE GIVEN NUMBERS

let supr x y = let var1 = (int_of_string(( string_of_int x ) ^ ( string_of_int y ))) in let var2 = (int_of_string(( string_of_int y ) ^ ( string_of_int x )))   in
if var1 >= var2 then true else false ;;

let rec arranger x l = match l with 
| hd :: tl -> if ( supr x hd ) then ( x :: hd :: tl ) else hd ::  ( arranger x tl )
| [] -> [x] ;;

let rec flower l = match l with 
| hd :: tl -> ( arranger hd ( flower tl )) 
| [] -> []      ;;

//////let rec calci l w q = match l with 
| hd :: [] -> if ( hd = q )  then  p := (!p * (w+1))) ; q   else  ( p := (!p * w) ) ; (oppo q)  
| hd :: tl -> if ( hd = q ) then (q || (calci tl (w+1) q)) else ((oppo q) || (calci tl w q)) 
| [] -> true ;;   


CODE FOR PICKCOIN

let p = ref 1 ;;

let oppo x = (x = false) ;; 

let calci a b c q = let var1 = a in let var2 = b in let var3 = c in if (var1 = q && var2 = q && var3 = q) then p := !p + 2  else if (var1 = q && var2 = q && var3 != q ) || (var1 = q && var2 != q && var3 = q ) || (var1 != q && var2 = q && var3 = q )  then p := !p + 1 else if
(var1 != q && var2 != q && var3 != q) then p := !p * 1 else p := !p ; ( var1 || var2 || var3 ) ;;

let rec pickcoin1 x q = if (x = 1 || x = 2 ) then true else if (x = 3 && q = false ) then (( p := !p + 1 ) ; false) else if x =3 then false else if ( x = 4 && q = true) then ((p := !p + 2);  true) else if x = 4 then true else 
( calci ( oppo (pickcoin1 (x-1) (oppo q))) (oppo (pickcoin1 (x-2) (oppo q)))  ( oppo (pickcoin1 (x-4) (oppo q)))  q ) ;; 

let pickcoin x = p := 1 ; if ( pickcoin1 x true ) then !p else 0  ;;

let caller a b c =  


let rec new_one x n = if n mod 2  then oppo x else x


let rec pickkie n fr sc = if (n = 1 || n = 2 || n = 4) then fr else if (n = 3) then sc 
else if ( (pickkie (n-1) sc fr ) = sc && (pickkie (n-2) sc fr) = sc && (pickkie (n-4) sc fr) = sc ) then sc else fr ;;

CODE FOR SETTING THE LIST IN INCREASING ORDER 

let rec arrng l a = match l with 
| hd :: tl -> if hd < a then a :: ( arrng tl hd ) else hd :: ( arrng tl a ) 
| [] -> [a] ;;

exception Invalid_Input ;;

let head l = match l with 
| hd :: tl -> hd 
| [] -> raise (Invalid_Input) ;;

let rec length l = match l with 
| hd :: tl -> 1 + length tl 
| [] -> 0 ;; 

let tail l = match l with 
| hd :: tl -> tl 
| [] -> [] ;;

let rec incr l m = if m = 1 then  ( arrng (tail l) (head l) ) else incr ( arrng (tail l) (head l) ) (m-1) ;;

let increaser l = incr l ( length l - 1 ) ;;





