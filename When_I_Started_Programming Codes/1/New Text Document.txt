let rec fib f = match f with
| one -> 1
| zero -> 0
| f -> fib (f-1) + fib (f-2);;

let welcome_msg x = match x with 
| "P" -> "Not welcome"
|"p" -> "Not welcome"
|"m" -> "welcome"
|"M" -> "welcome"
| _ -> "hunnh!!!" ;;

let is_even x = match (x mod 2) with 
| 0 -> true 
| _ -> false ;;

let p x = match x with 
| f -> "float"
| s -> "string"
| i -> "integer" ;;

let rec bin_dig2 x p = if p < 0.0 then "" else if (2.0 ** p ) > x then "0"^ (bin_dig2 (x) (p-. 1.0)) else "1" ^ bin_dig2 (x -. (2.0 ** p )) (p -. 1.0) ;;

let rec bin_dig x p = let var1 = ( x mod int_of_float (2.0 ** (p +. 1.0 ))) in 
if x = 0 then "" else ( bin_dig (x - var1) (p +. 1.0) ) ^ (string_of_int ( var1 / (int_of_float ( 2.0 **  p )))) ;;      

let rec add_bef x = if x = 0 then 0 else x + add_bef (x-1)  ;;  

let rec fact p = if p = 0.0 then 1.0 else p *. ( fact (p -. 1.0)) ;;   

let calci f x = (f ( x +. 0.00001) -. f (x) )/. 0.00001    ;;  

let rec fib n = if n = 0 then 0 else if n = 1 then 1 else fib(n-1) + fib (n-2) ;;

let rec frst_nfib n = if n = 1 then "1" else (string_of_int ( fib n )) ^ " " ^ ( frst_nfib (n-1) ) ;;


let rec ex x p l = let var2 = ( ( x ** p ) /. ( fact (p)) ) in if ( var2 -. l  <= 0.000001 ) then 1.0 else var2 +. ( ex x ( p +. 1.0 ) var2 ) ;;       


