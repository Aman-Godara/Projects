type link_one = 

| Point of (int * int ) 

| Line of ((int * int ) * (int * int ))

| Circle of ((int * int ) * int ) 

| Polygon of (int * int ) list ;;





let prm_line x y = match x,y with 

|(a,b),(c,d) -> let var1 = float_of_int a in let var2= float_of_int b in let var3 = float_of_int c in let var4 = float_of_int d in 
int_of_float(sqrt ((var1-.var3)*.(var1-.var3) +. (var2-.var4)*.(var2-.var4)))  ;;





let rec plygn1 l = match l with

| hd :: tl :: rest -> ( prm_line hd tl )+ plygn1 (tl :: rest)  

| hd :: [] -> 0 
|[] -> 0 ;;



let plygn l = match l with 

| hd :: rest -> plygn1 (List.rev(hd :: (List.rev l) )) 
| [] -> 0 ;;



let prm x = match x with

| Point (a,b) -> 0

| Line ((a,b),(c,d)) -> prm_line (a,b) (c,d) 

| Circle ((a,b),c) -> int_of_float(2.0 *. 4.0 *. atan (1.0) *. (float_of_int c)) 

| Polygon l -> plygn l ;; 



let tell x = match x with 
| Point (a,b) -> "P"
|Circle ((a,b),c) ->"C"
|Line ((a,b),(c,d)) -> "L" 
| Polygon l -> "PLG" ^" " ^  string_of_int ( List.length l )  ;;


let flo x = float_of_int x   ;;

let rec addish1 l = match l with                      (REMEMBER WHAT HAPPENED WITH ADDISH1 AND ADDISH2 CODES ,WHAT YOU HAD PREVIOUSLY WRITTEN AND HOW YOU CORRECTED IT ))
| hd :: tl -> let (a,b) = hd in (((flo a) +. addish1 tl ))
| [] -> 0.0 ;; 

let rec addish2 l = match l with 
| hd :: tl -> let (a,b) = hd in (((flo b) +. addish2 tl ))  
| [] -> 0.0 ;;

let bottle x = match x with
| Point (a,b) -> (flo a,flo b)
| Circle ((a,b),c) -> (flo a,flo b) 
| Line ((a,b),(c,d)) -> ((((flo a) +. (flo c))/. 2.0),((flo b) +. (flo d))/. 2.0 ) 
| Polygon l ->   ((addish1 l)/.float_of_int (List.length l),(addish2 l)/.float_of_int(List.length l)  ) ;;  

D 2 4 -> write the code for this correct the existing one .   

















let rec for_plgy x = match x with 
| hd :: tl ::rst -> (hd,tl) :: (for_plgy rst ) 
| hd :: [] -> (hd,0) :: []
| [] -> [] ;; 








let lock1 = [[1;2;3;45];[2;3;4;5;56];[3;4;576];[4;5;6;78];[9;8;7;6]];;


let rec prc_one x n p = try let var1 = int_of_char(String.get x n) in
if (var1 = 65 || var1 = 68 ||var1 =  84 || var1 =  80) then (prc_one x (n+1) ((string_of_int var1) ^ p ))
else if var1 = 32 then int_of_string(p) :: (prc_one x (n+1) "") 
else if ( var1 >= 48 && var1 <= 57 ) then  ( prc_one x (n+1) (p^string_of_int(var1 - 48) ))
else prc_one x (n+1) p 
with e -> [int_of_string p] ;;  

let call1 n p = match p with 
| hd :: tl -> if hd = n then "true" else "false"  
| [] -> "false" ;;


let rec call n p = match p with 
| hd :: tl -> if (call1 n hd ) = "false" then (call n tl) else hd    
| [] -> [] ;;


let rec ask_anth c n p = try 
let var1 = int_of_char(String.get c n ) in let var2 = int_of_char(String.get c (n+1) ) in 
 if var1 = 32 || (var1 = 44 && var2 != 32) then  int_of_string(p) :: (ask_anth c (n+1) (""))
else if (var1 >= 48 && var1 <= 57 ) then ask_anth c (n+1) (p^(string_of_int(var1 - 48)))
else ask_anth c (n+1) p 
with e -> [int_of_string p] ;;

let countf x = let var1 = (List.length x ) in match var1 with 
| 4 -> let a::b::c::d::[] = x in Circle ((b,c),d) 
| 3 -> let a::b::c::[] = x in Point (b,c) 
| 5 -> let a::b::c::d::e ::[] = x in Line ((b,c),(d,e))
| _ -> let hd :: tl = x in Polygon (for_plgy tl) ;; 






let folw_nxt x = let hd :: tl :: []= x in match hd with 
| 80 -> prm (countf (call tl lock1))
| 84 -> tell (countf (call tl lock1))
| 
| _  ->    0  ;;

let new_one x = folw_nxt (prc_one x 0 "") ;;

let strt_red x = if (int_of_char(String.get x 0 ) <= 57 && int_of_char(String.get x 0 ) >= 48  ) then (0) else (new_one x) ;;  
