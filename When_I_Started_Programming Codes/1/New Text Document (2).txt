let rec sum l = match l with
| [] -> 0
| a :: rest -> a + sum rest ;;

let rec sum_even l = match l with 
| [] -> 0 
| a :: rest -> if a mod 2 = 0 then (a + sum_even rest ) else sum_even rest ;;

[("col100" ,9);("ell100" ,7);("mtl100" ,4);("pyl100" ,4);("mtl101" ,8)] 

let rec alpha x = match x with 
| hd :: tl -> let (a,b) = hd in b :: (alpha tl)
| [] -> [] ;;

Josephus 

let chance n k x = (( k-1 ) mod n) + (x-1) ;;

let chance n k x = if ( (1 + (x-1) + (k)) mod n ) = 1 then 1 else if ( (1 + (x-1) + (k)) mod n ) = 0 then (n-1) else(( 1 + (x-1) + (k)) mod n ) -1;;

let killed n k x = if (( x + k -1 ) mod n ) > 0 then (( x + k -1 ) mod n ) else n  ;; 

let rec jsgg n k x =  if n = 1 then 1 else if ( killed n k x ) <= ( jsgg (n-1) k ( chance n k x ) ) then 1 + ( jsgg (n-1) k (chance n k x) ) 
else ( jsgg (n-1) k ( chance n k x ) ) ;;

type twree =
| Twod of (float * float)
| Threed of (float * float * float) 
| Error  ;;

let distance3d x y = match x, y with 
| Threed (a,b,c) , Threed (e,f,g) -> sqrt (  ((a -. e ) ** 2.0 ) +. ((b -. f ) ** 2.0 ) +. ((c -. g ) ** 2.0 ) ) 
| _ , _ -> 0.0 ;; 

let distance2d x y = match x,y with
  | Twod (a,b) , Twod(c,d) -> sqrt ( ((a -. c ) ** 2.0 ) +. ((b -. d ) ** 2.0 ))
  | _ , _ -> 0.0 ;;

let add_num a b = match a ,b with 
| Real (m) , Real (n ) -> (Real(n +. m ))
| Complex ( m,n) , Complex ( z,x) ->  Complex (( m +. z ) , (n +. x )) 
| _ , _ -> Error ;;

type number = 
  | Real of float
  | Complex of float * float
  | Error ;;



type genre = 
| Jack 
| Queen 
| King 
| Ace 
| Number of int ;;

type card = 
| Spade of genre 
| Diamond of genre 
| Heart of genre 
| Clubs of genre    ;;


let tell x = match x with 
| Spade v -> ( tell2 v ) ^ " of Spade" 
| Diamond v -> ( tell2 v ) ^ " of Diamonds" 
| Heart v -> ( tell2 v ) ^ " of Hearts"
| Clubs v -> ( tell2 v ) ^ " of Clubs" ;;

let tell2 x = match x with 
| Number a -> ( string_of_int ( a )) 
| Jack -> "J" 
| King -> "K" 
| Ace  -> "A"
| Queen -> "Q" ;;
